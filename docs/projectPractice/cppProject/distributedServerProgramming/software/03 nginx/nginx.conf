#运行用户, 如果centos平台，需要设置 user root;
#user  nobody;

#启动进程,通常设置成和cpu的数量相等
#查看CPU数目: cat /proc/cpuinfo | grep processor
worker_processes  1;

#全局错误日志及PID文件
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

#工作模式及连接数上限
events {
	#epoll是多路复用IO(I/O Multiplexing)中的一种方式,
	#仅用于linux2.6以上内核,可以大大提高nginx的性能
	use epoll;
	
	#单个后台worker process进程的最大并发链接数
    worker_connections  1024;
	
	# 并发总数是 worker_processes 和 worker_connections 的乘积
	# 即 max_clients = worker_processes * worker_connections
	# 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4 
	# worker_connections 值的设置跟物理内存大小有关
	# 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数
	# 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右
}


http {
	#设定mime类型,类型由mime.type文件定义
    include       mime.types;
    default_type  application/octet-stream;

	#设定日志格式
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

	#sendfile 指令指定 nginx 是否调用 sendfile 函数（ zero copy 方式）来输出文件，
	#对于普通应用，必须设为 on,
	#如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，
	#以平衡磁盘与网络I/O处理速度，降低系统的uptime
    sendfile        on;
    #tcp_nopush     on;

	#连接超时时间
    #keepalive_timeout  0;
    keepalive_timeout  65;
	
	#开启gzip压缩
    #gzip  on;
	
	#设定请求缓冲
	#client_header_buffer_size 128k;
	#large_client_header_buffers 4 128k;

	#设定虚拟主机配置
    server {
		#侦听80端口
        listen       80;
		
		#也可以设置为 合法域名
        server_name  localhost;
		
		#定义服务器的默认网站根目录位置
        #root   html;

        #charset koi8-r;

		#设定本虚拟主机的访问日志
        #access_log  logs/host.access.log  main;

		#默认请求
        location / {
			#定义如果访问根目录的请求目录
            root   html;
			#定义首页索引文件的名称
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        #
		#定义错误提示页面
		error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
		#PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
		#禁止访问 .htxxx 文件
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
